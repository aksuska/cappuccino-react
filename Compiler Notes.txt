==========================
COMPILER NOTES
==========================

0. GOALS
    A. Based on modern JavaScript standards
        1. e.g. class notation, declared properties, template literals, etc.
    B. Based on modern Cocoa standards
        1. Current implementation is old and out of date, and doesn't include newer functionality
    C. Embeddable--i.e. does not require owning the entire window
    D. Using ReactJS for view layer
        1. Provides closer-to-DOM implementation, for better accessibility and inspect-ability
        2. Provides cross-browser and cross-platform support, including excellent mobile support
    E. Smaller browser footprint
        1. Using import/export semantics to avoid loading too much unnecessary code
        2. Avoiding images whenever possible and relying more on built-in controls and CSS
    F. Faster execution
        1. Trying to be closer to native JS
        2. Less indirection
    G. Easier to read compiled code
    H. Better type checking (may have to wait for tools to mature)

I. TYPES
	A. C primitive types. All primitive types should be converted to JS primitive types
		1. all int including NSInteger/NSUInteger, EXCEPT for char/unichar, float & double => number
		2. char/unichar, const char *, etc => string
		3. We can use buffer arrays (ArrayBuffer, typed arrays, and DataView) for byte types (like for NSData), if we think we need to.

II. TRANSFORMATIONS
    A. Keywords
        1. nil/Nil should change to null
        2. self
            a. unless assigned to, all instances should be changed to "this"
            b. if assigned to, change assignment to "let self = " and leave all instances after assignment (NOT including same line) left alone.
        3. Support Objective-C keywords with literal conversions, such as @try/@catch/@finally & @throw
    B. Instance variables
        1. DO NOT ALLOW IVARS BEGINNING WITH '$'--RAISE EXCEPTION AT COMPILATION
        3. all framework ivars should be prefixed with '$'
        4. all usages of ivars need to change to this.ivar
    C. Properties
        1. Declared properties will be auto-synthesized
            a. Property/ivar will be created by prefixing with an underscore '_', unless one is already defined, and native getter/setter will be added
                1. Must check to see if accessors are implemented; if so, use their implementation for native version
                2. If the property options include a getter and/or setter, these are added as regular methods that call native getter/setter
                3. WARNING: alternative accessors such as get<Key>, is<Key>, and _<key> MUST be declared.
                    a. When using _<key>, must also declare different instance variable name in @synthesize or an error should be generated (see b.2. below)
            b. @synthesize will be supported if provided.
                1. If an instance var name is specified by the directive, it will be used instead of the default
                2. Any @synthesize directive without an ivar name specification should generate an error, since ivars and getter/setter must be different
            c. @dynamic will simply instruct the compiler to not generate accessors
            d. all accessor overrides need to be absorbed into native getter/setters
                1. NOTE: if only one of the getter/setter is overridden, the other must be added or it will be undefined (JS limitation on overriding accessors)
        2. dot syntax notation will be supported
            a. Usage is wrapped by objj_propGuard(), which prevents properties from being accessed directly
                1. getter usage compiles to objj_propGuard(object, 'property')
                2. setter usage compiles to objj_propGuard(object, 'property', [value])
            c. Only declared properties can be accessed using dot notation.
            d. DOT NOTATION WILL NOT INVOKE METHOD FORWARDING--MUST BE CALLED AS METHOD FOR THAT
        3. CAVEATS
            a. JS cannot distinguish between methods and properties that return a function value (including returning a class, but we can check for that)

    D. Methods
        1. Definitions/Declarations
            a. Colons are converted to underscores
            b. (void)setArgument:(id)argument atIndex:(CRUInteger)idx -> setArgument_atIndex_(argument: id, idx: CRUInteger): void
        2. All recognized method calls are converted to objj_msgSend() calls
            a. [object selector:arg1 with:arg2] -> objj_msgSend(object, 'selector:with:', arg1, arg2)
            a. [[CRObject alloc] init] -> objj_msgSend(objj_msgSend(CRObject, 'alloc'), 'init')
    E. Object literals
        1. @"string" -> new CRString("string")
        2. @'A', @99[FLU], @YES/NO -> new CRNumber(''##') (constructor will work out how to interpret value)
        3. @{key: value} -> new CRDictionary(key, value)
        4. @[value1, value2] -> new CRArray(value1, value2)
        5. We can support boxed expressions if we want, we will just need to wrap them in a function and figure out what the result type is
    F. Imports
        1. Class is always default export; also export all other defined symbols.
        2. Every default import should be exported to facilitate the "chained" import that Objective-C uses
            a. likewise, every import should reference all exported items
        3. Can we import only used symbols?
    G. References
        1. @ref(var) compiles to:
            { get name() { return 'var' }, get var() { return var }, set var(value) { var = value } }
        2. @deref(refVar) compiles to:
            refVar[refVar.name]
