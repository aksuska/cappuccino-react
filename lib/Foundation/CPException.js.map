{"version":3,"sources":["../../src/Foundation/CPException.js"],"names":["CPGetUncaughtExceptionHandler","CPSetUncaughtExceptionHandler","CPInvalidArgumentException","CPException","name","$$name","anything","reason","$$reason","userInfo","$$userInfo","callStackReturnAddresses","$$callStackReturnAddresses","callStackSymbols","$$callStackSymbols","exceptionWithName_reason_userInfo_","exception","new","raise_format_","format","args","raise_format_arguments_","Error","stack","split","raise","$$uncaughtExceptionHandler","handler","window","removeEventListener","addEventListener"],"mappings":"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","file":"CPException.js","sourcesContent":["/**\n * Implementation of NSException\n **/\n\nimport {objj_initialize, objj_string, objj_throw_arg} from '../Objective-J';\nimport CPObject from './CPObject';\nimport CPString from './CPString';\nimport objj_msgSend from \"../Objective-J\";\n\n// globals\nexport const CPInvalidArgumentException = objj_string(\"CPInvalidArgumentException\");\n\nexport default class CPException extends CPObject {\n\n\tstatic $$uncaughtExceptionHandler = null;\n\n\t$$name = null;\n\t$$reason = null;\n\t$$userInfo = null;\n\t$$callStackReturnAddresses = null;\n\t$$callStackSymbols = null;\n\n\tget name() {return this.$$name;}\n\tset name(anything) {objj_throw_arg(\"Assignment to readonly property\");}\n\n\tget reason() {return this.$$reason;}\n\tset reason(anything) {objj_throw_arg(\"Assignment to readonly property\");}\n\n\tget userInfo() {return this.$$userInfo;}\n\tset userInfo(anything) {objj_throw_arg(\"Assignment to readonly property\");}\n\n\tget callStackReturnAddresses() {return this.$$callStackReturnAddresses;}\n\tset callStackReturnAddresses(anything) {objj_throw_arg(\"Assignment to readonly property\");}\n\n\tget callStackSymbols() {return this.$$callStackSymbols;}\n\tset callStackSymbols(anything) {objj_throw_arg(\"Assignment to readonly property\");}\n\n\tstatic exceptionWithName_reason_userInfo_(name, reason, userInfo) {\n\t\tconst exception = this.new();\n\t\tif (exception) {\n\t\t\texception.$$name = name;\n\t\t\texception.$$reason = reason;\n\t\t\texception.$$userInfo = userInfo;\n\t\t}\n\t\treturn exception\n\t}\n\n\tstatic raise_format_(name, format, ...args) {\n\t\tthis.raise_format_arguments_(name, format, args);\n\t}\n\n\tstatic raise_format_arguments_(name, format, args) {\n\t\t// null format seems to be ignored in cocoa, so we'll do that too\n\t\tconst reason = (format !== null) ? objj_msgSend(CPString, 'stringWithFormat:', format, ...args) : null;\n\t\tconst exception = this.exceptionWithName_reason_userInfo_(name, reason, null);\n\t\tif (exception === null)\n\t\t\tthrow \"!? Could not create CPException object ?!\";\n\n\t\t// because we don't have a sensible way of parsing call stacks, we'll just set whatever browser gives us\n\t\texception.$$callStackReturnAddresses = exception.$$callStackSymbols = new Error().stack.split(\"\\n\");\n\t\tthrow exception;\n\t}\n\n\traise() {\n\t\tthrow this;\n\t}\n}\n\nexport function CPGetUncaughtExceptionHandler() {\n\treturn objj_initialize(CPException).$$uncaughtExceptionHandler;\n}\n\nexport function CPSetUncaughtExceptionHandler(handler/*(Event e)*/) {\n\tif (objj_initialize(CPException).$$uncaughtExceptionHandler !== null) {\n\t\twindow.removeEventListener('error', CPException.$$uncaughtExceptionHandler, true);\n\t}\n\tCPException.$$uncaughtExceptionHandler = handler;\n\twindow.addEventListener('error', handler, true);\n}\n"]}